//- Merge Style Objects
-function mergeStyles(obj1, obj2) {
-	var obj = {};
-	for(var attr in obj1) {
-		obj[attr] = obj1[attr];
-	}
-	for(var attr in obj2) {
-		obj[attr] = obj2[attr];
-	}
-	return obj;
-};

//- Translate a key
-var dictionary = dict || {};

-function translate(key, attrs) {
-	var value				= dictionary[key];
- var attrCounter = 0;

-	if(value) {
-		tagReplacement();
-		return value;
-	}

-	return key;

-	function tagReplacement() {
-		var tags = value.match(/\#\/?[a-zA-Z]+\#/g);

-		for(var t in tags) {
-			var tagName = tags[t].replace(/\#/g,'').toLowerCase();

-			value = value.replace(tags[t], function(result) {
-				return result.replace('#','<').replace('#','>').toLowerCase();
-			});

-			exeption(tagName);
-		}
-	};

- function exeption(tagName) {
- 	var regex = new RegExp('<' + tagName + '>');

- 	// Replace TAGs //////////////////////////////////////		
-		// Link-open TAG
- 	if(tagName == 'link' || tagName == 'url') {
-			var url	= attrs && attrs[attrCounter] ? attrs[attrCounter++] : k + '_URL';
-			value = value.replace(regex, '<a href="' + translate(url) + '" target="_blank">');
-		}
-		// Link-close TAG
-		if(tagName == '/link' || tagName == '/url') value = value.replace(regex, '</a>');
		

- 	// Replace HTML-Entities /////////////////////////////
- 	// non-breakable-space
-		if(tagName == 'nbsp') value = value.replace(regex, '&nbsp;');
- 	// shy
-		if(tagName == 'shy') { value = value.replace(regex, '&shy;'); console.log(value); }
- 	// laquo
-		if(tagName == 'laquo') value = value.replace(regex, '&laquo;');
- 	// raquo
-		if(tagName == 'raquo') value = value.replace(regex, '&raquo;');
- 	// amp
-		if(tagName == 'amp') value = value.replace(regex, '&amp;');
- 	// copyright
-		if(tagName == 'copy') value = value.replace(regex, '&copy;');

-	};
-};